{"name":"Java面试集锦-----Java内存模型及内存间交互操作","tagline":"Java内存模型及内存间交互操作","body":"今年9月份要找工作，无意间看到一篇博客，就想着把里面的知识点总结一下，巩固一下基础知识，为找工作做一些准备：\r\nhttp://blog.csdn.net/pistolove/article/details/46753275\r\n\r\n- **Java内存模型**\r\n- **内存间交互操作**\r\n\r\n\r\n-------------------\r\n\r\n## Java内存模型的概述\r\n> **内存模型概念：**屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。\r\n> \r\n>**Java内存模型目标：** 定义程序中各变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。\r\n\r\n  - **Java内存模型的规定**\r\n     - 所有的变量都存储在主内存中。\r\n     - 每条线程都有自己的工作内存。\r\n     - 不同的线程之间无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存才能完成。\r\n  - **注意事项**\r\n     - 上述的变量包括实例字段、静态字段和构成数组对象的元素，但不包括局部变量和方法参数（以为它们是线程私有的，不共享）。\r\n     - 线程的工作内存中存储了被改线程使用到的变量的主内存的副本拷贝，线程对所有操作都必须在工作内存中进行，而不能直接读写主存中的变量。\r\n     - 这里讲的主内存、工作内存与Java内存区域中的Java堆、栈、方法区并不是同一层次的内存划分， 基本上没有关系。\r\n\r\n##内存间交互操做\r\n\r\n\r\n> 存在两个问题：\r\n> 1、一个变量如何从主内存拷贝到工作内存？\r\n> 2、如何从工作内存同步回主内存？\r\n> 对于这两个问题，Java内存模型中定义了8种操作来完成，虚拟机实现时必须保证下面提及的每一个操作都是原子的、不可再分的（double、long类型除外）。\r\n\r\n  - **8种操作**\r\n     - lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占的状态。\r\n     - unclock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。\r\n     - read（读取）：作用于主内存的变量，把一个变量的值从主内存传输到线程的工作内存，以便随后的load动作使用。\r\n     - load（载入）：作用于工作内存的变量，把read操作从主内存中得到的变量值放入工作内存的变量副本中。\r\n     - use（使用）：作用于工作内存的变量，把工作内存中一个变量的值传递给执行引擎。\r\n     - assign（赋值）：作用于工作内存的变量，把执行引擎接收到的值赋给工作内存的变量。\r\n     - store（存储）：作用于工作内存的变量，把工作内存中一个变量的值传送给主内存中，以便随后的write操作使用。\r\n     - write（写入）：作用于主内存的变量，把store操作从工作内存中得到的变量的值放入主内存的变量中。\r\n  - **操作的规定**\r\n     - 不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存中读取了但工作内存不接受，或者工作内存发起了回写但主内存不接受的情况出现。\r\n     - 不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步到主内存。\r\n     - 不允许一个线程无原因地（没有发生任何assign操作）把数据从线程的工作内存同步到主内存。\r\n     - 一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，就是对一个变量use、store操作之前，必须先执行过了assign和load操作。\r\n     - 一个变量在同一时刻只允许一个线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unclock操作，变量才会被解锁。\r\n     - 如果对一个变量执行lock操作，那么会清空工作内存次变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。\r\n     - 如果对一个变量执行lock操作，那么会清空工作内存次变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。\r\n     - 对一个变量执行unclock之前，必须先把此变量同步回主内存中（执行store、write操作）。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}